/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import Controller.ProductoController;
import DTO.ProductoDTO;
import DTO.UsuarioDTO;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.net.URL;
import javax.help.HelpBroker;
import javax.help.HelpSet;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;

/**
 *
 * @author JETTSUSHD
 */
public class EditarProducto extends javax.swing.JFrame {

    /**
     * Creates new form EditarProducto
     */
    ProductoDTO producto;
    UsuarioDTO usuario;
    private HelpSet helpSet;
    private HelpBroker helpBroker;

    public EditarProducto(UsuarioDTO usuario, ProductoDTO producto) {
        this.producto = producto;
        this.usuario = usuario;
        initComponents();
        setLocationRelativeTo(null);
        setExtendedState(MAXIMIZED_BOTH);

        // Cargar los datos del producto en los campos
        tfNombre.setText(producto.getNombre());
        tfPrecio.setText(String.valueOf(producto.getPrecio()));
        tfStock.setText(String.valueOf(producto.getStock()));
        setTitle("Ventana editar producto");
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        // Capturar evento al cerrar la ventana con "X"
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                dispose();
                new ProductoView(usuario).setVisible(true);
            }
        });
        keyBinding();

        
        initHelp();
        ejecutarF1();
        
        setResizable(false);
    }

    private void initHelp() {
        try {
            // Obtener el recurso desde el classpath
            ClassLoader cl = this.getClass().getClassLoader();
            URL hsURL = cl.getResource("help/help_set.hs");

            if (hsURL == null) {
                System.out.println("No se encontró el archivo de ayuda en el classpath.");
                return;
            }

            System.out.println("Archivo de ayuda encontrado en: " + hsURL);

            // Cargar el HelpSet
            helpSet = new HelpSet(cl, hsURL);
            helpBroker = helpSet.createHelpBroker();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void ejecutarF1() {
        KeyStroke f1KeyStroke = KeyStroke.getKeyStroke("F1");
        Action helpAction = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                miAyudaActionPerformed(null); // Ejecuta el mismo evento del botón
            }
        };

        // Asignar la acción al panel principal (ventana) para que funcione en cualquier parte
        this.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(f1KeyStroke, "help");
        this.getRootPane().getActionMap().put("help", helpAction);
    }

    public void keyBinding() {
        // Acción para aplicar los filtros cuando se presiona ENTER
        Action aplicaranadir = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                bEditar.doClick(); // Simula un click en aplicar filtro
            }
        };

        // Añadir keybinding para la tecla ENTER para aplicar los filtros
        rootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "AÑADIR");
        rootPane.getActionMap().put("AÑADIR", aplicaranadir); // Fixed: rootpane -> rootPane

        requestFocusInWindow();
        setFocusable(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lNombre = new javax.swing.JLabel();
        tfNombre = new javax.swing.JTextField();
        lPrecio = new javax.swing.JLabel();
        tfPrecio = new javax.swing.JTextField();
        lStock = new javax.swing.JLabel();
        tfStock = new javax.swing.JTextField();
        bEditar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miVolver = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        miAyuda = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        lNombre.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lNombre.setText("Nombre:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 11);
        getContentPane().add(lNombre, gridBagConstraints);

        tfNombre.setEditable(false);
        tfNombre.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        tfNombre.setPreferredSize(new java.awt.Dimension(400, 44));
        tfNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfNombreActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(tfNombre, gridBagConstraints);

        lPrecio.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lPrecio.setText("Precio:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 11);
        getContentPane().add(lPrecio, gridBagConstraints);

        tfPrecio.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        tfPrecio.setPreferredSize(new java.awt.Dimension(400, 44));
        tfPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPrecioActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(tfPrecio, gridBagConstraints);

        lStock.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lStock.setText("Stock:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 11);
        getContentPane().add(lStock, gridBagConstraints);

        tfStock.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        tfStock.setPreferredSize(new java.awt.Dimension(400, 44));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(tfStock, gridBagConstraints);

        bEditar.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        bEditar.setText("Editar");
        bEditar.setPreferredSize(new java.awt.Dimension(200, 44));
        bEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEditarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(bEditar, gridBagConstraints);

        jMenu1.setText("Archivo");
        jMenu1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        miVolver.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        miVolver.setText("Volver");
        miVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miVolverActionPerformed(evt);
            }
        });
        jMenu1.add(miVolver);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ayuda");
        jMenu2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        miAyuda.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        miAyuda.setText("Acerca de ");
        miAyuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAyudaActionPerformed(evt);
            }
        });
        jMenu2.add(miAyuda);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miAyudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAyudaActionPerformed
        // TODO add your handling code here:
        if (helpBroker != null) {
            helpBroker.setDisplayed(true);
        } else {
            System.out.println("El sistema de ayuda no está disponible.");
        }
    }//GEN-LAST:event_miAyudaActionPerformed

    private void tfNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfNombreActionPerformed

    private void tfPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPrecioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfPrecioActionPerformed

    private void miVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miVolverActionPerformed
        // TODO add your handling code here:
        // Cerrar la ventana actual
        dispose();

        // Abrir la ventana de ProductoView
        new ProductoView(usuario).setVisible(true);
    }//GEN-LAST:event_miVolverActionPerformed

    private void bEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEditarActionPerformed
        // Obtener los valores de los campos
        String nombre = tfNombre.getText().trim();
        String precioText = tfPrecio.getText().trim();
        String stockText = tfStock.getText().trim();

        // Debug: Imprimir el nombre para verificar
        System.out.println("Nombre enviado: '" + nombre + "'");

        // Validar que los campos no estén vacíos
        if (nombre.isEmpty() || precioText.isEmpty() || stockText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Convertir precio y stock a números
        try {
            double precio = Double.parseDouble(precioText);
            int stock = Integer.parseInt(stockText);

            // Validar que el precio y el stock sean valores válidos
            if (precio < 0 || stock < 0) {
                JOptionPane.showMessageDialog(this, "El precio y el stock deben ser valores positivos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Crear un DTO con los nuevos datos, preservando el id
            ProductoDTO productoActualizado = new ProductoDTO(producto.getId(), nombre, precio, stock);

            // Llamar al controlador para actualizar el producto
            ProductoController productoController = new ProductoController();
            String resultado = productoController.actualizarProducto(producto.getNombre(), productoActualizado);

            // Mostrar el resultado al usuario
            JOptionPane.showMessageDialog(this, resultado, "Resultado", JOptionPane.INFORMATION_MESSAGE);

            // Cerrar la ventana de edición y volver a la ventana principal
            dispose();
            new ProductoView(usuario).setVisible(true);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El precio y el stock deben ser números válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bEditarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bEditar;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel lNombre;
    private javax.swing.JLabel lPrecio;
    private javax.swing.JLabel lStock;
    private javax.swing.JMenuItem miAyuda;
    private javax.swing.JMenuItem miVolver;
    private javax.swing.JTextField tfNombre;
    private javax.swing.JTextField tfPrecio;
    private javax.swing.JTextField tfStock;
    // End of variables declaration//GEN-END:variables
}
